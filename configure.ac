# Configure script for MIT IGSM. See README.dev

### Initialization
AC_PREREQ([2.66])
AC_INIT(igsm, [1.0], [globalchange@mit.edu])
AM_INIT_AUTOMAKE
# check that $srcdir points to the actual location of the source code
AC_CONFIG_SRCDIR([src/atm/atmosphere.F])
# â€¦but that we are not in the top source directory
if test -z "$srcdir" -o "$srcdir" = "."; then
  AC_MSG_ERROR([must be invoked from within a build directory. See
    ./build/README.])
fi
# generate ctrparam.h
AC_CONFIG_HEADERS([ctrparam.h])
# keep a comment at the bottom of ctrparam.h(.in) indicating where the user can
# set custom symbols
AH_BOTTOM([/* Add custom IGSM preprocessor #defines below this comment. Some known
   symbols are: ACCRI, DATA4TEM, FIXED_FOR, FIXED_PCO2, GHS_ALB, HR_DATA, IPCC_EMI,
   OLD_LAPGAS, and ORBITAL_FOR. */])


### Package options
# This section defines the command-line options accepted by 'configure'. For
# usage instructions, run './configure --help'.

# Package option for model configurations
AC_ARG_WITH([setup],
  [AS_HELP_STRING([--with-setup],
    [model version to compile: either 'climate' (implies --without-tem), \
    'historical' or 'fullchem' (default)])],
  [if test $withval != climate -a $withval != historical -a $withval != fullchem; then
     AC_MSG_ERROR([invalid value '$withval' for --with-setup; try --help])
   else
     model=$withval
   fi],
  [model=fullchem])

# Package option for ocean carbon
AC_ARG_ENABLE([ocncarbon],
  [AS_HELP_STRING([--enable-ocncarbon],
    [enable the ocean carbon model (default for --with-setup=historical and \
    fullchem)])],
  [ocncarbon=$enableval],
  [if test $model != climate; then
     ocncarbon=yes
   else
     ocncarbon=no
   fi])

# Package option for the urban metamodel
AC_ARG_ENABLE([meta],
  [AS_HELP_STRING([--enable-meta],
    [enable the urban metamodel (default for --with-setup=fullchem)])],
  [meta=$enableval],
  [if test $model = fullchem; then
     meta=yes
   else
     meta=no
   fi])

# Package option for 2D or 3D ocean
AC_ARG_ENABLE([mitgcm],
  [AS_HELP_STRING([--enable-mitgcm],
    [instead of the 2D ocean, produce libraries suitable for linking with the \
    MITgcm three-dimensional ocean model, and don't produce an igsm22 \
    executable])],
  [ocean=3D],
  [ocean=2D])

# Package option for chemistry version
AC_ARG_WITH([chem],
  [AS_HELP_STRING([--with-chem],
    [select version of the atmospheric chemistry model: ARG=95 or 12 (default)])],
  [CHEM_VERSION=$withval],
  [CHEM_VERSION=12])

# Package option for CLM version
AC_ARG_WITH([clm],
  [AS_HELP_STRING([--with-clm],
    [select version of the Common Land Model: ARG=2.1 or 3.5 (default); \
     --without-clm implies --disable-tem])],
  [CLM_VERSION=$withval],
  [CLM_VERSION=3.5])

# Package option for TEM version
AC_ARG_ENABLE([tem],
  [AS_HELP_STRING([--enable-tem],
    [enable the Terrestrial Ecosystem Model (default for \
     --with-setup=historical and fullchem)])],
  [tem=$enableval],
  [if test $model = climate -o $CLM_VERSION = no; then
     tem=no
   else
     tem=yes
   fi])
# check that the user gave sensible arguments
if test $CLM_VERSION = no -a $tem = yes; then
  AC_MSG_ERROR([cannot give both --enable-tem and --without-clm])
fi

# Package option for tracers
AC_ARG_ENABLE([tracers],
  [AS_HELP_STRING([--enable-tracers],
    [enable non-reactive substances for tracing (default: disabled)])],
  [tracers=$enableval],
  [tracers=no])

### Build environment & language features
# This section checks whether certain common language features are available in
# the build environment. It was mostly generated by autoscan.

# TODO: Figure out how to invoke 'module load' when the user runs 'configure'.
#   Currently configuration (on svante) will fail if the user hasn't loaded the
#   pgi and netcdf modules.
# TODO: examine individual checks like AC_FUNC_REALLOC and see whether the IGSM
#   code actually responds to them. If not, remove.

# C++ compiler
AC_PROG_CXX(pgCC)
# C compiler
AC_PROG_CC(pgcc)
# Fortran 77 compiler
AC_PROG_F77
# Fortran 90+ compiler
AC_PROG_FC(pgf90)
# FIXME: this is cheating. The IGSM modules atm, ocm, ocn_ml and meta contain
# Fortran files with the extension '.F', which typically denotes Fortran 77, but
# are actually Fortran 90 code with 
F77=$FC
# TODO: the following three checks may not be necessary. Remove if possible.
AC_FC_DUMMY_MAIN
AC_FC_LIBRARY_LDFLAGS
AC_FC_MAIN

AC_SUBST([MPI_FC], [mpif90])

AC_PROG_RANLIB
AC_PROG_MAKE_SET

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_INLINE

# Checks for library functions.
AC_CHECK_FUNCS([modf pow])

# Checks for NetCDF libraries.
AC_CHECK_HEADER([netcdf.h], [AC_CHECK_LIB([netcdf], [nc_inq_libvers])])
# the Fortran library
AC_MSG_CHECKING([[for nf_inq_libvers in -lnetcdff]])
LIBS+=" -lnetcdff"
AC_LANG_PUSH([Fortran])
AC_LINK_IFELSE(
  [AC_LANG_PROGRAM(, [      include 'netcdf.inc'
      print *, nf_inq_libvers()])],
  [AC_MSG_RESULT([yes])], [AC_MSG_FAILURE([no])])
AC_LANG_POP
# the include path (for CLM)
if test "$INC_NETCDF" = ""; then
  INC_NETCDF=`nc-config --includedir`
  LIB_NETCDF=`ldconfig -p | grep -m1 libnetcdf | sed "s@.* => \(.*\)@\1@" | xargs dirname`
  MOD_NETCDF="/home/software/netcdf-new/netcdf-4.1.2/include"
  AC_SUBST(INC_NETCDF)
  AC_SUBST(LIB_NETCDF)
  AC_SUBST(MOD_NETCDF)
fi

# Checks for OpenMPI libraries
if test `which ompi_info 2>/dev/null`; then
  INC_MPI=`ompi_info --parseable --path incdir | cut -d: -f 3`
  LIB_MPI=`ompi_info --parseable --path libdir | cut -d: -f 3`
  AC_SUBST(INC_MPI)
  AC_SUBST(LIB_MPI)
fi

# Common compiler flags for IGSM code
FFLAGS+=" -r8 -i4"
CXXFLAGS+=" -Mscalarsse -fpic"


### Modules to build
# Based on the package options, this section controls whether individual modules
# of the IGSM are built or not by populating MODULE_DIRS (see src/Makefile.am).
# It also sets the libraries to link against (MODULE_LDADD). The order of these
# is important and should not be disturbed.

# 1. Multilayer 2D ocean, atmosphere, ocean carbon
if test $ocean = 2D; then
  MODULE_DIRS+=" ocn_ml"
  # the 2D ocean module must be listed before libatm.a
  MODULE_LDADD="ocn_ml/libml.a"
  # the ocm module is only for carbon in a 2D ocean
  if test $ocncarbon = yes; then
    MODULE_DIRS+=" ocm"
    MODULE_LDADD+=" ocm/libocm.a"
  fi
else
  MODULE_DIRS+=" ocn_3d"
  # if using the 3D ocean, the first library is libatm.a
  MODULE_LDADD="ocn_3d/libocn_3d.a"
fi
MODULE_LDADD+=" atm/libatm.a"
# 2. Appropriate version of the Common Land Model
if test $CLM_VERSION != no; then
  CLM_DIR="clm/$CLM_VERSION"
  MODULE_DIRS+=" $CLM_DIR"
  MODULE_LDADD+=" $CLM_DIR/libclm.a"
  if test $CLM_VERSION = 2.1; then
    # CLM 2.1 requires the ESMF library to be linked explicitly
    MODULE_LDADD+=" -lesmf"
  else
    CLM35_TEM="off"
  fi
  # the CLM directory must be symlinked from within the build tree, because CLM
  # has its own build system
  #AC_CONFIG_LINKS([src/$CLM_DIR:$srcdir/src/$CLM_DIR])
  AC_CONFIG_COMMANDS([clm],
    [mkdir -p src/$clmdir && cp -r $srcdir/src/$clmdir/* src/$clmdir],
    [clmdir=$CLM_DIR])
fi
# 3. Appropriate version of the Terrestrial Ecosystem Model
if test $tem = yes; then
  # CLM and TEM versions only work in specific combinations
  if test $CLM_VERSION = 2.1; then
    TEM_VERSION=4.3.8
  else
    # CLM_VERSION=3.5
    TEM_VERSION=4.4c
    CLM35_TEM="on"
  fi
  MODULE_DIRS+=" tem/$TEM_VERSION"
  MODULE_LDADD+=" tem/$TEM_VERSION/libtem.a"
fi
# substitute in the CLM 3.5 makefile if necessary
if test $CLM_VERSION = 3.5; then
  AC_SUBST(CLM35_TEM)
  AC_CONFIG_FILES([src/clm/3.5/Makefile])
fi
# 4. Atmospheric chemistry model
if test $model = fullchem; then
  MODULE_DIRS+=" chem"
  MODULE_LDADD+=" chem/libchem.a"
fi
# 5. Urban airshed metamodel
if test $meta = yes; then
  MODULE_DIRS+=" meta"
  MODULE_LDADD+=" meta/libmeta.a"
fi
# 6. Tracers
if test $tracers = yes; then
  MODULE_DIRS+=" tracers"
  MODULE_LDADD+=" tracers/libtracers.a"
fi

# substitute the resulting variables in src/Makefile.am
AC_SUBST(MODULE_DIRS)
MODULE_LDADD+=" -L$LIB_NETCDF"
AC_SUBST(MODULE_LDADD)

# only build the igsm22 executable if using the 2D ocean; otherwise build igsm23
AM_CONDITIONAL([IGSM_2D], [test $ocean = 2D])
if test $ocean = 2D; then
  AC_SUBST([BINARIES], [igsm22])
else
  AC_SUBST([BINARIES], [igsm23])
fi

### Defines.
# This section sets the C/C++/Fortran preprocessor symbols (#define) that are
# written to ctrparam.h.

# Common defines for all model configurations
AC_DEFINE(N_LAT, 46, [Number of latitudinal grid points])
AC_DEFINE(N_LEV, 11, [Number of vertical pressure layers])
AC_DEFINE(N_LEVOCEAN, 11, [Number of vertical layers in diffusive ocean model
  (either 11 or 12)])  #code here not properly if-defed, always include
AC_DEFINE(N_LON0, 72, [Number of longitudinal grid points; unused, but must be
  must be 72 for N_LAT=46 (per atm/check_settings.F)])
AC_DEFINE(NYR_CHEM, 1, [Number of year of chemistry model integration (124 for
  period from 1977 to 2100)]) #this need in chem common blocks, always included

# Defines when using CLM and TEM
if test $CLM_VERSION != no; then
  AC_DEFINE(CLM, 1, [Coupling CLM])
  if test $CLM_VERSION = 3.5; then
    AC_DEFINE(CLM35, 1, [Coupling CLM 3.5])
  fi
  if test $tem = yes; then
    AC_DEFINE(CPL_TEM, 1, [Coupling chemistry])
    AC_DEFINE(CPL_NEM, 1, [Coupling natural emission model])
  fi
fi

# Defines depending on 2D vs. 3D ocean
if test $ocean = 2D; then
  AC_DEFINE(ML_2D, 1, [Two-dimensional ocean])
else
  AC_DEFINE(OCEAN_3D, 1, [Three-dimensional ocean])
fi
# the ocm module is for carbon in 2D or 3D oceans
if test $ocncarbon = yes; then
  AC_DEFINE(CPL_OCEANCO2, 1, [Coupling ocean CO2 model])
fi

# Defines that depend on whether chemistry is included
if test $model = fullchem; then
  AC_DEFINE(CPL_CHEM, 1, [Coupling chemistry])
  # NYR_CHEM, PREDICTED_* always accompany CPL_CHEM
  AC_DEFINE(PREDICTED_GASES, 1, [Use predicted concentrations of chemical
    species by chemistry model to calculate radiative forcing (ifghgpredict)])
  AC_DEFINE(PREDICTED_AEROSOL, 1, [Use predicted aerosol concentrations by
    chemistry model to calculate radiative forcing (ifaerpredict)])
  AC_DEFINE(PREDICTED_BC, 1, [Use predicted black carbon concentrations by
    chemistry model to calculate radiative forcing])
  # OLD_CHEM only for the old version
  if test $CHEM_VERSION = 95; then
    AC_DEFINE(OLD_CHEM, 1, [Old (1995) version of the atmospheric chemistry
      model is in use])
  fi
  # more options for chemistry runs only
  AC_DEFINE(INC_3GASES, 1, [Including "3 gases"])
  AC_DEFINE(O3_RAD, 1, [Use predicted ozone in radiation module])
  if test $meta = yes; then
    AC_DEFINE(CPL_META, 1, [Coupling parameterized urban airshed model (meta)])
  fi
fi

# Defines for historical mode only
if test $model = historical; then
  AC_DEFINE(O3_FORCED, 1, [Use forced ozone scenario (ifo3forced)])
  AC_DEFINE(SVI_ALBEDO, 1, [Modify albedo to simulate sulfate aerosol forcing
    (ifsulfalb)])
fi

if test $model = historical -o $model = fullchem; then
  AC_DEFINE(VOL_AER, 1, [Include aerosol forcing due to volcanic activitiy])
fi

# Unusual defines. See README.dev for information on how to use these.
if true; then
  # always ON
  AC_DEFINE(ORBITAL_FOR, 1, [Use radiative forcing adjusted for Earth's
    orbital parameters. If undefined, the default from a (which?) NASA GISS
    model is used])
else
  # always OFF
  AC_DEFINE(ACCRI, 1, [Include GHG emissions from aviation. Requires accri_data
    and accri_scaling defined in eppaemis.dat])
  AC_DEFINE(DATA4TEM, 1, [Save data for offline simulations with CLM/TEM])
  AC_DEFINE(FIXED_FOR, 1, [Run model with fixed GHG forcing. TEM and OCM will
    see changing CO2, while radiation code uses GHGs in the start year (yeargt
    in name.dat)])
  AC_DEFINE(FIXED_PCO2, 1, [Fix CO2 for TEM and OCM])
  AC_DEFINE(GHS_ALB, 1, [TODO: remove this symbol (1 reference in
    atm/r95mit.F)])
  AC_DEFINE(HR_DATA, 1, [(with DATA4TEM) write data hourly])
  AC_DEFINE(IPCC_EMI, 1, [Use a simple carbon model with carbon emissions from
    the file specified by co2_data in name.dat])
  AC_DEFINE(OLD_LAPGAS, 1, [Use an old way of handling greenhouse effects of
    different gases in atm/radia0.F (for backwards compatibility)])
fi


### Output Makefiles
AC_CONFIG_FILES([Makefile
	src/Makefile
	src/atm/Makefile
	src/chem/Makefile
	src/inc/Makefile
	src/meta/Makefile
	src/ocm/Makefile
	src/ocn_3d/Makefile
	src/ocn_3d/options.sh
	src/ocn_ml/Makefile
	src/tem/4.3.8/Makefile
	src/tem/4.4c/Makefile
	src/tracers/Makefile
	util/Makefile
	util/analysis/Makefile
	util/eppa/Makefile])
AC_OUTPUT
